import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.animation import FuncAnimation

def generate_torus_2(N, n, r, R):
    dphi = 2*np.pi/n
    dtheta = 2*np.pi/N
    init_pn = np.zeros((6,n))
    init_pn[:,0]=np.array([0,R+r,0,0,1,0])
    tor_pts = np.zeros((6,n*N))
    for dn in range(1,n):
        init_pn[:,dn] = np.array([0, R + r*np.cos(dn*dphi), r*np.sin(dn*dphi),0,np.cos(dn*dphi),np.sin(dn*dphi)])
    for dN in range(N):
        rot_z = np.array([[np.cos(dN*dtheta), -np.sin(dN*dtheta),0,0,0,0],[np.sin(dN*dtheta),np.cos(dN*dtheta),0,0,0,0],[0,0,1,0,0,0],[0,0,0,np.cos(dN*dtheta), -np.sin(dN*dtheta),0],[0,0,0,np.sin(dN*dtheta),np.cos(dN*dtheta),0],[0,0,0,0,0,1]])
        pt = np.dot(rot_z, init_pn)
        tor_pts[:,dN*n:(dN+1)*n] = pt
    return tor_pts
                
def convert_to_pix(tor_pts_proj, size, rnge, v1):
    pixels = np.ones((size,size))
    pixel_z = np.ones((size,size))*(rnge+1)
    for i in range(np.shape(tor_pts_proj)[1]):
        i_x = int(np.floor(((tor_pts_proj[0,i]/(2*rnge))+0.5)*size))
        i_y = int(np.floor(((tor_pts_proj[1,i]/(2*rnge))+0.5)*size)) 
        if tor_pts_proj[2,i]< pixel_z[i_x, i_y]:
            pixel_z[i_x, i_y] = tor_pts_proj[2,i]
            v2 = tor_pts_proj[3:, i]  
            dot_product = np.dot(v1, v2)
            magnitude_v2 = np.linalg.norm(v2)
            magnitude_v1 = np.linalg.norm(v1)
            cosine_of_angle = dot_product / (magnitude_v1 * magnitude_v2)
            if cosine_of_angle<0:
                pixels[i_x,i_y] = 1
            else:
                pixels[i_x, i_y]=1-cosine_of_angle
    return pixels

def project(tor_pts_i, k1, k2):
    tor_pts_proj = tor_pts_i
    tor_pts_proj[0,:] = k1*tor_pts_i[0,:]/(k2+tor_pts_i[2,:])
    tor_pts_proj[1,:] = k1*tor_pts_i[1,:]/(k2+tor_pts_i[2,:])
    return tor_pts_proj


def rotate(tor_pts_i, a, b):
    ang_x = a*np.pi/180
    ang_y = b*np.pi/180
    n_pt = np.shape(tor_pts_i)[1]
    rot_x = np.array([[1,0,0,0,0,0],[0, np.cos(ang_x), -np.sin(ang_x),0,0,0],[0, np.sin(ang_x), np.cos(ang_x),0,0,0],[0,0,0,1,0,0],[0,0,0,0, np.cos(ang_x), -np.sin(ang_x)],[0,0,0,0, np.sin(ang_x), np.cos(ang_x)]])
    rot_y = np.array([[np.cos(ang_y), 0, np.sin(ang_y),0,0,0],[0, 1, 0,0,0,0],[-np.sin(ang_y), 0, np.cos(ang_y),0,0,0],[0, 0, 0, np.cos(ang_y), 0, np.sin(ang_y)],[0, 0, 0, 0, 1, 0],[0, 0, 0, -np.sin(ang_y), 0, np.cos(ang_y)]])
    rot_tor_pts = np.zeros((6,n_pt))
    rot_tor_pts = np.dot(rot_y,np.dot(rot_x,tor_pts_i))
    return rot_tor_pts

size = 100
rnge = 10
r = 3.5
R = 5.5
v1 = [-1,-1,-2]
angle = 5
k1 = 30
k2 = 30
n = 40
N = 70

tor_pts = generate_torus_2(N,n,r, R)
pixels = convert_to_pix(tor_pts, size, rnge, v1)
     
def update(frame, tor_pts, size, angle, v1, rnge):
    rot_tor_pts = rotate(tor_pts, angle*frame, 0.5*angle*frame)
    tor_pts_proj = project(rot_tor_pts, k1, k2)
    pixels = convert_to_pix(tor_pts_proj, size, rnge, v1)
    im.set_array(pixels)
    return im,






fig = plt.figure(figsize=(10, 8))

im = plt.imshow(pixels, cmap=plt.get_cmap('gray_r'))
ani = FuncAnimation(fig, update, frames = 500, interval = 0, fargs=[tor_pts, size, angle, v1, rnge],blit=True)
plt.show()